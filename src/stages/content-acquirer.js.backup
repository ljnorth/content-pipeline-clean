import { Logger } from '../utils/logger.js';
import path from 'path';
import fs from 'fs-extra';
import { SupabaseClient } from '../database/supabase-client.js';
import { ApifyClient } from 'apify-client';
import axios from 'axios';
import { exec } from 'child_process';

const TEMP_DIR = process.env.TEMP_DIR || 'temp';
const APIFY_TOKEN = process.env.APIFY_TOKEN;

export class ContentAcquirer {
  constructor() {
    this.logger = new Logger();
    this.db = new SupabaseClient();
    this.client = new ApifyClient({ 
      token: APIFY_TOKEN 
    });
  }

  async process(accounts) {
    const allPosts = [];

    for (const account of accounts) {
      const username = account.username;
      const outDir = path.resolve(TEMP_DIR, username);
      await fs.ensureDir(outDir);

      this.logger.info(`📥 Scraping posts for @${username} via Apify`);

      try {
        const posts = await this.scrapeTikTokAccount(username, outDir);
        allPosts.push(...posts);
        this.logger.info(`✅ Successfully scraped ${posts.length} posts for @${username}`);
      } catch (error) {
        this.logger.error(`❌ Failed to scrape @${username}: ${error.message}`);
        // Continue with other accounts even if one fails
        continue;
      }
    }

    this.logger.info(`🎉 Total posts scraped: ${allPosts.length}`);
    return allPosts;
  }

  async scrapeTikTokAccount(username, outDir) {
    this.logger.info(`🚀 Starting Apify TikTok scraper for @${username}`);

    // Prepare input for Apify TikTok scraper (correct format) - REDUCED MEMORY USAGE
    const input = {
      excludePinnedPosts: false,
      profileSorting: "popular",
      profiles: [username],
      proxyCountryCode: "None",
      resultsPerPage: 5, // Reduced from 10 to 5
      scrapeRelatedVideos: false,
      shouldDownloadAvatars: false,
      shouldDownloadCovers: false,
      shouldDownloadMusicCovers: false,
      shouldDownloadSlideshowImages: true,
      shouldDownloadSubtitles: false,
      shouldDownloadVideos: true,
      profileScrapeSections: ["videos"],
      searchSection: "",
      maxProfilesPerQuery: 1, // Reduced from 10 to 1
      maxRequestRetries: 1, // Reduced retries
      maxConcurrency: 1 // Reduced concurrency
    };

    try {
      this.logger.info(`📡 Calling Apify actor: clockworks~tiktok-scraper`);
      
      // Run the Actor and wait for it to finish (smart polling built-in)
      const run = await this.client.actor('clockworks~tiktok-scraper').call(input);
      
      this.logger.info(`✅ Apify run completed with status: ${run.status}`);
      
      if (run.status !== 'SUCCEEDED') {
        throw new Error(`Apify run failed with status: ${run.status}`);
      }

      // Get the results from the dataset
      this.logger.info(`📥 Fetching results from dataset: ${run.defaultDatasetId}`);
      const { items } = await this.client.dataset(run.defaultDatasetId).listItems();
      
      this.logger.info(`📊 Found ${items.length} posts from Apify`);
      
      // Process the results and download media
      return await this.processApifyResults(items, username, outDir);

    } catch (error) {
      this.logger.error(`❌ Apify scraping failed for @${username}: ${error.message}`);
      
      // Provide helpful error messages for common issues
      if (error.message.includes('timeout')) {
        throw new Error(`TikTok scraping timed out. The account might be private or have no public posts.`);
      } else if (error.message.includes('rate limit')) {
        throw new Error(`Rate limit exceeded. Please wait a few minutes before trying again.`);
      } else if (error.message.includes('not found')) {
        throw new Error(`TikTok account @${username} not found or is private.`);
      } else if (error.message.includes('memory limit')) {
        throw new Error(`Apify memory limit exceeded. Please upgrade your plan or reduce the number of posts to scrape.`);
      } else {
        throw new Error(`Apify scraping error: ${error.message}`);
      }
    }
  }

  async processApifyResults(items, username, outDir) {
    const posts = [];
    
    for (const item of items) {
      try {
        this.logger.info(`🔄 Processing post: ${item.id}`);
        
        const post = await this.processSinglePost(item, username, outDir);
        if (post) {
          posts.push(post);
        }
      } catch (error) {
        this.logger.error(`❌ Failed to process post ${item.id}: ${error.message}`);
        // Continue with other posts even if one fails
        continue;
      }
    }
    
    return posts;
  }

  async processSinglePost(item, username, outDir) {
    const postId = item.id;
    const postDir = path.resolve(outDir, postId);
    await fs.ensureDir(postDir);

    let videoPath = null;
    let imagePaths = [];

    // Debug: Log the structure of the item to understand what we're getting
    this.logger.info(`🔍 Processing post ${postId} - Available fields: ${Object.keys(item).join(', ')}`);

    // Download video if available
    if (item.webVideoUrl) {
      try {
        this.logger.info(`🎥 Downloading video for post ${postId}`);
        videoPath = await this.downloadVideo(item.webVideoUrl, postDir, postId);
      } catch (error) {
        this.logger.error(`❌ Failed to download video for post ${postId}: ${error.message}`);
      }
    }

    // Download slideshow images if available - try multiple possible field names
    let slideshowImages = [];
    if (item.slideshowImageLinks && Array.isArray(item.slideshowImageLinks)) {
      slideshowImages = item.slideshowImageLinks;
    } else if (item.slideshowImageLinks && Array.isArray(item.slideshowImageLinks.downloadLink)) {
      slideshowImages = item.slideshowImageLinks.downloadLink;
    } else if (item.imageLinks && Array.isArray(item.imageLinks)) {
      slideshowImages = item.imageLinks;
    }

    if (slideshowImages.length > 0) {
      try {
        this.logger.info(`🖼️ Downloading ${slideshowImages.length} slideshow images for post ${postId}`);
        imagePaths = await this.downloadSlideshowImages(slideshowImages, postDir, postId);
      } catch (error) {
        this.logger.error(`❌ Failed to download slideshow images for post ${postId}: ${error.message}`);
      }
    }

    // If no video and no slideshow images, try to download a single image from various possible sources
    if (!videoPath && imagePaths.length === 0) {
      let singleImageUrl = null;
      
      // Try different possible image URL fields
      if (item.coverUrl) {
        singleImageUrl = item.coverUrl;
      } else if (item.originalCoverUrl) {
        singleImageUrl = item.originalCoverUrl;
      } else if (item.imageLinks && item.imageLinks.length > 0) {
        singleImageUrl = item.imageLinks[0];
      } else if (item.mediaUrls && item.mediaUrls.length > 0) {
        singleImageUrl = item.mediaUrls[0];
      }

      if (singleImageUrl) {
        try {
          this.logger.info(`🖼️ Downloading single image for post ${postId}`);
          const singleImagePath = await this.downloadImage(singleImageUrl, postDir, `${postId}_image`);
          if (singleImagePath) {
            imagePaths.push(singleImagePath);
          }
        } catch (error) {
          this.logger.error(`❌ Failed to download single image for post ${postId}: ${error.message}`);
        }
      }
    }

    // Create post object with all metadata
    const post = {
      username: username,
      post_id: postId,
      post_timestamp: item.createTimeISO || new Date().toISOString(),
      like_count: item.diggCount || 0,
      comment_count: item.commentCount || 0,
      view_count: item.playCount || 0,
      save_count: item.shareCount || 0,
      engagement_rate: this.calculateEngagementRate(item),
      video_path: videoPath,
      image_paths: imagePaths,
      text: item.text || '',
      web_video_url: item.webVideoUrl || null,
      created_at: new Date().toISOString()
    };

    this.logger.info(`✅ Processed post ${postId}: ${imagePaths.length} images, ${videoPath ? '1 video' : 'no video'}`);
    return post;
  }

  async downloadVideo(videoUrl, postDir, postId) {
    const videoPath = path.resolve(postDir, `${postId}.mp4`);
    
    return new Promise((resolve, reject) => {
      // Use more flexible format selection - don't restrict to specific height
      const command = `yt-dlp -f "best" -o "${videoPath}" "${videoUrl}"`;
      
      exec(command, (error, stdout, stderr) => {
        if (error) {
          // Try with even more flexible format if the first attempt fails
          const fallbackCommand = `yt-dlp -f "worst" -o "${videoPath}" "${videoUrl}"`;
          
          exec(fallbackCommand, (fallbackError, fallbackStdout, fallbackStderr) => {
            if (fallbackError) {
              reject(new Error(`yt-dlp failed: ${fallbackError.message}`));
              return;
            }
            
            if (fs.existsSync(videoPath)) {
              resolve(videoPath);
            } else {
              reject(new Error('Video file not found after download'));
            }
          });
          return;
        }
        
        if (fs.existsSync(videoPath)) {
          resolve(videoPath);
        } else {
          reject(new Error('Video file not found after download'));
        }
      });
    });
  }

  async downloadSlideshowImages(imageLinks, postDir, postId) {
    const imagePaths = [];
    
    for (let i = 0; i < imageLinks.length; i++) {
      const imageLink = imageLinks[i];
      const imagePath = path.resolve(postDir, `${postId}_slide_${i + 1}.jpg`);
      
      try {
        // Handle different possible structures of imageLink
        let actualUrl = imageLink;
        if (typeof imageLink === 'object' && imageLink.downloadLink) {
          actualUrl = imageLink.downloadLink;
        } else if (typeof imageLink === 'object' && imageLink.url) {
          actualUrl = imageLink.url;
        }
        
        // Validate URL before attempting download
        if (!this.isValidUrl(actualUrl)) {
          this.logger.error(`❌ Invalid URL for slideshow image ${i + 1}: ${actualUrl}`);
          continue;
        }
        
        await this.downloadImage(actualUrl, postDir, `${postId}_slide_${i + 1}`);
        imagePaths.push(imagePath);
      } catch (error) {
        this.logger.error(`❌ Failed to download slideshow image ${i + 1}: ${error.message}`);
      }
    }
    
    return imagePaths;
  }

  async downloadImage(imageUrl, postDir, filename) {
    const imagePath = path.resolve(postDir, `${filename}.jpg`);
    
    // Validate URL before attempting download
    if (!this.isValidUrl(imageUrl)) {
      throw new Error(`Invalid URL: ${imageUrl}`);
    }
    
    try {
      const response = await axios({
        method: 'GET',
        url: imageUrl,
        responseType: 'stream',
        timeout: 30000, // 30 second timeout
        headers: {
          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
        }
      });
      
      const writer = fs.createWriteStream(imagePath);
      response.data.pipe(writer);
      
      return new Promise((resolve, reject) => {
        writer.on('finish', () => resolve(imagePath));
        writer.on('error', reject);
      });
    } catch (error) {
      throw new Error(`Failed to download image: ${error.message}`);
    }
  }

  isValidUrl(string) {
    try {
      const url = new URL(string);
      return url.protocol === 'http:' || url.protocol === 'https:';
    } catch (_) {
      return false;
    }
  }

  calculateEngagementRate(item) {
    const likes = item.diggCount || 0;
    const comments = item.commentCount || 0;
    const shares = item.shareCount || 0;
    const views = item.playCount || 1; // Avoid division by zero
    
    const engagement = likes + comments + shares;
    return (engagement / views * 100).toFixed(2);
  }
}
